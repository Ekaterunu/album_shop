/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace MusicShop {
  export type AlbumStruct = {
    index: BigNumberish;
    uid: BytesLike;
    title: string;
    executor: string;
    price: BigNumberish;
    quantity: BigNumberish;
    image: string;
    songs: string;
  };

  export type AlbumStructOutput = [
    index: bigint,
    uid: string,
    title: string,
    executor: string,
    price: bigint,
    quantity: bigint,
    image: string,
    songs: string
  ] & {
    index: bigint;
    uid: string;
    title: string;
    executor: string;
    price: bigint;
    quantity: bigint;
    image: string;
    songs: string;
  };
}

export interface MusicShopInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAlbum"
      | "albums"
      | "albumsPerPage"
      | "allAlbums"
      | "buy"
      | "currentIndex"
      | "currentOrderId"
      | "deleteAlbum"
      | "delivered"
      | "getAlbumsBoughtBy"
      | "getAlbumsByPage"
      | "orders"
      | "owner"
      | "supportsInterface"
      | "updateAlbum"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AlbumBought"
      | "AlbumDeleted"
      | "AlbumUpdated"
      | "OrderDelivered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAlbum",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "albums",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "albumsPerPage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allAlbums", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAlbum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delivered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlbumsBoughtBy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAlbumsByPage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAlbum",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addAlbum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "albums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "albumsPerPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAlbums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAlbum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delivered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAlbumsBoughtBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlbumsByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAlbum",
    data: BytesLike
  ): Result;
}

export namespace AlbumBoughtEvent {
  export type InputTuple = [
    uid: BytesLike,
    customer: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [uid: string, customer: string, timestamp: bigint];
  export interface OutputObject {
    uid: string;
    customer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlbumDeletedEvent {
  export type InputTuple = [albumIndex: BigNumberish, albumUid: BytesLike];
  export type OutputTuple = [albumIndex: bigint, albumUid: string];
  export interface OutputObject {
    albumIndex: bigint;
    albumUid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlbumUpdatedEvent {
  export type InputTuple = [
    albumIndex: BigNumberish,
    newPrice: BigNumberish,
    newQuantity: BigNumberish,
    newTitle: string,
    newExecutor: string,
    newImage: string,
    newSongs: string
  ];
  export type OutputTuple = [
    albumIndex: bigint,
    newPrice: bigint,
    newQuantity: bigint,
    newTitle: string,
    newExecutor: string,
    newImage: string,
    newSongs: string
  ];
  export interface OutputObject {
    albumIndex: bigint;
    newPrice: bigint;
    newQuantity: bigint;
    newTitle: string;
    newExecutor: string;
    newImage: string;
    newSongs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderDeliveredEvent {
  export type InputTuple = [albumUid: BytesLike, customer: AddressLike];
  export type OutputTuple = [albumUid: string, customer: string];
  export interface OutputObject {
    albumUid: string;
    customer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MusicShop extends BaseContract {
  connect(runner?: ContractRunner | null): MusicShop;
  waitForDeployment(): Promise<this>;

  interface: MusicShopInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAlbum: TypedContractMethod<
    [
      uid: BytesLike,
      title: string,
      executor: string,
      price: BigNumberish,
      quantity: BigNumberish,
      image: string,
      songs: string
    ],
    [void],
    "nonpayable"
  >;

  albums: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, string, string] & {
        index: bigint;
        uid: string;
        title: string;
        executor: string;
        price: bigint;
        quantity: bigint;
        image: string;
        songs: string;
      }
    ],
    "view"
  >;

  albumsPerPage: TypedContractMethod<[], [bigint], "view">;

  allAlbums: TypedContractMethod<[], [MusicShop.AlbumStructOutput[]], "view">;

  buy: TypedContractMethod<[_index: BigNumberish], [void], "payable">;

  currentIndex: TypedContractMethod<[], [bigint], "view">;

  currentOrderId: TypedContractMethod<[], [bigint], "view">;

  deleteAlbum: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  delivered: TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  getAlbumsBoughtBy: TypedContractMethod<
    [customer: AddressLike],
    [MusicShop.AlbumStructOutput[]],
    "view"
  >;

  getAlbumsByPage: TypedContractMethod<
    [page: BigNumberish],
    [MusicShop.AlbumStructOutput[]],
    "view"
  >;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        orderId: bigint;
        albumUid: string;
        customer: string;
        orderedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateAlbum: TypedContractMethod<
    [
      _index: BigNumberish,
      newPrice: BigNumberish,
      newQuantity: BigNumberish,
      newTitle: string,
      newExecutor: string,
      newImage: string,
      newSongs: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAlbum"
  ): TypedContractMethod<
    [
      uid: BytesLike,
      title: string,
      executor: string,
      price: BigNumberish,
      quantity: BigNumberish,
      image: string,
      songs: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "albums"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, string, string] & {
        index: bigint;
        uid: string;
        title: string;
        executor: string;
        price: bigint;
        quantity: bigint;
        image: string;
        songs: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "albumsPerPage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allAlbums"
  ): TypedContractMethod<[], [MusicShop.AlbumStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[_index: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "currentIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentOrderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deleteAlbum"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delivered"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAlbumsBoughtBy"
  ): TypedContractMethod<
    [customer: AddressLike],
    [MusicShop.AlbumStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAlbumsByPage"
  ): TypedContractMethod<
    [page: BigNumberish],
    [MusicShop.AlbumStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        orderId: bigint;
        albumUid: string;
        customer: string;
        orderedAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateAlbum"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      newPrice: BigNumberish,
      newQuantity: BigNumberish,
      newTitle: string,
      newExecutor: string,
      newImage: string,
      newSongs: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AlbumBought"
  ): TypedContractEvent<
    AlbumBoughtEvent.InputTuple,
    AlbumBoughtEvent.OutputTuple,
    AlbumBoughtEvent.OutputObject
  >;
  getEvent(
    key: "AlbumDeleted"
  ): TypedContractEvent<
    AlbumDeletedEvent.InputTuple,
    AlbumDeletedEvent.OutputTuple,
    AlbumDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AlbumUpdated"
  ): TypedContractEvent<
    AlbumUpdatedEvent.InputTuple,
    AlbumUpdatedEvent.OutputTuple,
    AlbumUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderDelivered"
  ): TypedContractEvent<
    OrderDeliveredEvent.InputTuple,
    OrderDeliveredEvent.OutputTuple,
    OrderDeliveredEvent.OutputObject
  >;

  filters: {
    "AlbumBought(bytes32,address,uint256)": TypedContractEvent<
      AlbumBoughtEvent.InputTuple,
      AlbumBoughtEvent.OutputTuple,
      AlbumBoughtEvent.OutputObject
    >;
    AlbumBought: TypedContractEvent<
      AlbumBoughtEvent.InputTuple,
      AlbumBoughtEvent.OutputTuple,
      AlbumBoughtEvent.OutputObject
    >;

    "AlbumDeleted(uint256,bytes32)": TypedContractEvent<
      AlbumDeletedEvent.InputTuple,
      AlbumDeletedEvent.OutputTuple,
      AlbumDeletedEvent.OutputObject
    >;
    AlbumDeleted: TypedContractEvent<
      AlbumDeletedEvent.InputTuple,
      AlbumDeletedEvent.OutputTuple,
      AlbumDeletedEvent.OutputObject
    >;

    "AlbumUpdated(uint256,uint256,uint256,string,string,string,string)": TypedContractEvent<
      AlbumUpdatedEvent.InputTuple,
      AlbumUpdatedEvent.OutputTuple,
      AlbumUpdatedEvent.OutputObject
    >;
    AlbumUpdated: TypedContractEvent<
      AlbumUpdatedEvent.InputTuple,
      AlbumUpdatedEvent.OutputTuple,
      AlbumUpdatedEvent.OutputObject
    >;

    "OrderDelivered(bytes32,address)": TypedContractEvent<
      OrderDeliveredEvent.InputTuple,
      OrderDeliveredEvent.OutputTuple,
      OrderDeliveredEvent.OutputObject
    >;
    OrderDelivered: TypedContractEvent<
      OrderDeliveredEvent.InputTuple,
      OrderDeliveredEvent.OutputTuple,
      OrderDeliveredEvent.OutputObject
    >;
  };
}
